---------- Color ----------

Color = {r=0,g=0,b=0,a=0}

-- allow for Processing style color assignment
function Color:new(...)
    local one, two, three, four = ...
    
    if type(one) == "table" then return one end -- pass through if given a Color
    
    local c
    if four      ~= nil then c = {r=one,g=two,b=three,a=four} -- R G B A
    elseif three ~= nil then c = {r=one,g=two,b=three,a=1}    -- R G B
    elseif two   ~= nil then c = {r=one,g=one,b=one,a=two}    -- Gray A
    else                     c = {r=one,g=one,b=one,a=1}      -- Gray
    end
    return c
end

--[[
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 1].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
]]
function Color:hsla(h,s,l,a)
  a = a or 1
  local r, g, b

  if s == 0 then
    r, g, b = l, l, l -- achromatic
  else
    function hue2rgb(p, q, t)
      if t < 0   then t = t + 1 end
      if t > 1   then t = t - 1 end
      if t < 1/6 then return p + (q - p) * 6 * t end
      if t < 1/2 then return q end
      if t < 2/3 then return p + (q - p) * (2/3 - t) * 6 end
      return p
    end

    local q
    if l < 0.5 then q = l * (1 + s) else q = l + s - l * s end
    local p = 2 * l - q

    r = hue2rgb(p, q, h + 1/3)
    g = hue2rgb(p, q, h)
    b = hue2rgb(p, q, h - 1/3)
  end

  return Color:new(r,g,b,a)
end

-- sets the background color of the window
function background(...)
    local c = Color:new(...)
    backgroundRGBA(c.r,c.g,c.b,c.a)
end
